/*
 * Copyright 2020 eBlocker Open Source UG (haftungsbeschraenkt)
 *
 * Licensed under the EUPL, Version 1.2 or - as soon they will be
 * approved by the European Commission - subsequent versions of the EUPL
 * (the "License"); You may not use this work except in compliance with
 * the License. You may obtain a copy of the License at:
 *
 *   https://joinup.ec.europa.eu/page/eupl-text-11-12
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
package org.eblocker.server.icap.transaction.processor;

import org.eblocker.server.common.data.Device;
import org.eblocker.server.common.malware.MalwareFilterService;
import org.eblocker.server.common.network.BaseURLs;
import org.eblocker.server.common.session.Session;
import org.eblocker.server.http.service.DeviceService;
import org.eblocker.server.icap.transaction.Transaction;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Arrays;

public class MalwareFilterProcessorTest {

    private static final String REDIRECT_PAGE = "malware-detected.html";
    private static final String BLOCKED_URL = "https://malware.org/latest.exe";
    private static final String BASE_URL = "https://eblocker.box/";

    private Device device;
    private Transaction transaction;
    private MalwareFilterService malwareFilterService;
    private MalwareFilterProcessor processor;

    @Before
    public void setUp() {
        device = Mockito.mock(Device.class);
        DeviceService deviceService = Mockito.mock(DeviceService.class);
        Mockito.when(deviceService.getDeviceById(Mockito.anyString())).thenReturn(device);

        Session session = Mockito.mock(Session.class);
        Mockito.when(session.getDeviceId()).thenReturn("device:1234");

        transaction = Mockito.mock(Transaction.class, Mockito.RETURNS_DEEP_STUBS);
        Mockito.when(transaction.getSession()).thenReturn(session);

        BaseURLs baseURLs = Mockito.mock(BaseURLs.class);
        Mockito.when(baseURLs.selectURLForPage(Mockito.any())).thenReturn(BASE_URL);

        malwareFilterService = Mockito.mock(MalwareFilterService.class);
        Mockito.when(malwareFilterService.isBlocked(BLOCKED_URL)).thenReturn(true);
        Mockito.when(malwareFilterService.getMalwareByUrl(BLOCKED_URL)).thenReturn(Arrays.asList("unit", "test"));

        processor = new MalwareFilterProcessor(REDIRECT_PAGE, baseURLs, deviceService, malwareFilterService);
    }

    @Test
    public void testFilterDisabled() {
        Mockito.when(device.isMalwareFilterEnabled()).thenReturn(false);
        Assert.assertTrue(processor.process(transaction));
        Mockito.verifyZeroInteractions(malwareFilterService);
    }

    @Test
    public void testFilterEnabledNoMalwareUrl() {
        Mockito.when(device.isMalwareFilterEnabled()).thenReturn(true);
        Mockito.when(transaction.getRequest().getUri()).thenReturn("https://xkcd.com");
        Assert.assertTrue(processor.process(transaction));
        Mockito.verify(malwareFilterService).isBlocked("https://xkcd.com");
    }

    @Test
    public void testFilterEnabledMalwareUrl() throws UnsupportedEncodingException {
        Mockito.when(device.isMalwareFilterEnabled()).thenReturn(true);
        Mockito.when(transaction.getRequest().getUri()).thenReturn(BLOCKED_URL);
        Assert.assertFalse(processor.process(transaction));
        Mockito.verify(malwareFilterService).isBlocked(BLOCKED_URL);
        Mockito.verify(transaction).redirect(BASE_URL + REDIRECT_PAGE + "?target=" + URLEncoder.encode(BLOCKED_URL, "UTF-8") + "&malware=unit,test");
    }

}
