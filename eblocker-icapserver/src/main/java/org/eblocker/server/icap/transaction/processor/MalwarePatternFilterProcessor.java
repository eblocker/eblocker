/*
 * Copyright 2020 eBlocker Open Source UG (haftungsbeschraenkt)
 *
 * Licensed under the EUPL, Version 1.2 or - as soon they will be
 * approved by the European Commission - subsequent versions of the EUPL
 * (the "License"); You may not use this work except in compliance with
 * the License. You may obtain a copy of the License at:
 *
 *   https://joinup.ec.europa.eu/page/eupl-text-11-12
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
package org.eblocker.server.icap.transaction.processor;

import com.google.inject.Inject;
import com.google.inject.name.Named;
import org.eblocker.server.common.network.BaseURLs;
import org.eblocker.server.common.transaction.Decision;
import org.eblocker.server.common.util.UrlUtils;
import org.eblocker.server.http.service.DeviceService;
import org.eblocker.server.icap.filter.Category;
import org.eblocker.server.icap.filter.Filter;
import org.eblocker.server.icap.filter.FilterManager;
import org.eblocker.server.icap.filter.FilterResult;
import org.eblocker.server.icap.transaction.Transaction;
import org.eblocker.server.icap.transaction.TransactionProcessor;
import org.eblocker.server.icap.transaction.processor.filter.PatternBlockerUtils;

public class MalwarePatternFilterProcessor implements TransactionProcessor {

    private final String redirectPage;
    private final BaseURLs baseUrls;
    private final DeviceService deviceService;
    private final FilterManager filterManager;
    private final PatternBlockerUtils patternBlockerUtils;

    @Inject
    public MalwarePatternFilterProcessor(@Named("malware.filter.redirect.page") String redirectPage,
                                         BaseURLs baseUrls,
                                         DeviceService deviceService,
                                         FilterManager filterManager,
                                         PatternBlockerUtils patternBlockerUtils) {
        this.redirectPage = redirectPage;
        this.baseUrls = baseUrls;
        this.deviceService = deviceService;
        this.filterManager = filterManager;
        this.patternBlockerUtils = patternBlockerUtils;
    }

    @Override
    public boolean process(Transaction transaction) {
        if (!deviceService.getDeviceById(transaction.getSession().getDeviceId()).isMalwareFilterEnabled()) {
            return true;
        }

        Filter filter = filterManager.getFilter(Category.MALWARE);
        FilterResult result = filter.filter(transaction);

        if (result.getDecision() == Decision.BLOCK) {
            transaction.setFilterResult(result);
            String url = transaction.getRequest().uri();
            transaction.redirect(baseUrls.selectURLForPage(url)
                + redirectPage
                + "?target=" + UrlUtils.urlEncode(url));
            patternBlockerUtils.countBlockedDomain(org.eblocker.server.common.data.parentalcontrol.Category.MALWARE, result, transaction.getSession(), transaction);
            return false;
        }

        return true;
    }

}
